@page "/tasks"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient HttpClient

<div class="bg-light py-4">

    <div class="container">

        <h3 class="mb-3">My tasks</h3>
        @if (assignments != null)
        {
            @foreach (Assignment assignment in assignments)
            {
                <div class="bg-white border border-secondary my-4 p-4" style="margin-left: 0px; margin-right:0px">
                    <table class="table">
                        <tbody>
                            <tr class="row">
                                <th class="col-4" scope="row">Room number:</th>
                                <td class="col-8">@assignment.RoomNumber</td>
                            </tr>
                            <tr class="row">
                                <th class="col-4" scope="row">Task:</th>
                                <td class="col-8">@assignment.Type</td>
                            </tr>
                            <tr class="row">
                                <th class="col-4" scope="row">Observations:</th>
                                <td class="col-8">@assignment.Observations</td>
                            </tr>
                            <tr class="row">
                                <th class="col-4" scope="row">Task added:</th>
                                <td class="col-8">@assignment.AddedAt.ToString("f")</td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="clearfix">
                        <button type="button" class="btn btn-primary float-right" @onclick="@(e => DeleteTask(@assignment.Id))">Mark as done</button>
                    </div>
                </div>

            }
        }

    </div>

</div>


@code {
    const string ApiDisplayAssignmentsEndpoint = "http://localhost:6704/api/v1/assignments/own";
    const string ApiDeleteAssignmentEndpoint = "http://localhost:6704/api/v1/assignments?id=";
    List<Assignment> assignments;

    protected override async Task OnInitializedAsync()
    {
        string token = await localStorage.GetItemAsync<string>("jwt");
        var getRequest = new HttpRequestMessage(HttpMethod.Get, ApiDisplayAssignmentsEndpoint);
        getRequest.Headers.Add("authorizationToken", token);
        var httpResponse = await HttpClient.SendAsync(getRequest);
        assignments = await httpResponse.Content.ReadFromJsonAsync<List<Assignment>>();
    }

    private async Task DeleteTask(int assignmentId)
    {
        //string assignmentId = lnk.Attributes["CustomParameter"].ToString();
        string urlDelete = ApiDeleteAssignmentEndpoint + assignmentId;
        string token = await localStorage.GetItemAsync<string>("jwt");
        var deleteRequest = new HttpRequestMessage(HttpMethod.Delete, urlDelete);
        deleteRequest.Headers.Add("authorizationToken", token);
        var response = await HttpClient.SendAsync(deleteRequest);
        int index = assignments.FindIndex(elem => elem.Id == assignmentId);
        assignments.RemoveAt(index);
    }

    public class Assignment
    {
        public int Id { get; set; }
        public int RoomNumber { get; set; }
        public int UserId { get; set; }
        public string Type { get; set; }
        public string Observations { get; set; }
        public DateTime AddedAt { get; set; }
        public int Status { get; set; }
    }
}
