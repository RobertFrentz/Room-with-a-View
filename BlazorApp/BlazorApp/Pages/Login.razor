@page "/login"
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div class="container">

    <div class="col-md-6 mt-5 mx-auto">

        <div class="card-header bg-secondary text-white">
            <h3>Sign In</h3>
        </div>

        <div class="card-body bg-dark" style="min-height: 320px">
            <form class="needs-validation" onsubmit="return false">
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    </div>
                    <input type="Email" class="form-control" placeholder="Email" required @bind="email">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-key"></i></span>
                    </div>
                    <input type="password" class="form-control" placeholder="password" required @bind="password">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="form-check text-light input-group-lg">
                    <input type="checkbox" class="form-check-input" id="rememberMeCheck">
                    <label class="form-check-label" for="rememberMeCheck">Remember me</label>
                </div>
                <div class="form-group d-flex justify-content-end">
                    <input type="submit" value="Login" class="btn btn-light" @onclick="(() => LoginUser())">
                </div>
            </form>
        </div>

        <div class="card-footer bg-secondary">
            <div class="d-flex justify-content-center text-light">
                <span>Don't have an account? <a href="register">Sign Up</a></span>
            </div>
        </div>



    </div>

</div>


@code {
    private string email;
    private string password;
    private string username;
    bool loginError = false;
    bool isUserLoggedIn;

    private bool loading;

    private async Task LoginUser()
    {
        string apiUrl = "http://localhost:60094/api/v1/users/login";

        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            return;
        }

        UserLoginData userLoginData = new UserLoginData { email = email, password = password };

        var httpResponse = await Http.PostAsJsonAsync(apiUrl, userLoginData);


        LoginError loginErrorObj;
        if ((int)httpResponse.StatusCode != 200)
        {
            Console.WriteLine($"There was an error! { httpResponse.ReasonPhrase}");
            loginErrorObj = await httpResponse.Content.ReadFromJsonAsync<LoginError>();
            loginError = true;
            Console.WriteLine($"{httpResponse.ReasonPhrase} ----- {loginErrorObj.error_info}");
            return;
        }

        string temp = await httpResponse.Content.ReadAsStringAsync();
        Console.WriteLine(temp);

        //TODO: json parsing
        //await sessionStorage.SetItemAsync("jwt", temp);
        NavigationManager.NavigateTo("/home", true);
    }

    public async Task<bool> IsLoggedIn()
    {
        var token = await sessionStorage.GetItemAsync<string>("jwt");
        return !string.IsNullOrWhiteSpace(token);
    }

    public async void LogOut()
    {
        //this will clear the session data
        await sessionStorage.ClearAsync();
        NavigationManager.NavigateTo("/login", true);
    }


    public class UserLoginData
    {
        public string email { get; set; }
        public string password { get; set; }
    }

    public class LoginError
    {
        public string error_info { get; set; }
    }

}
