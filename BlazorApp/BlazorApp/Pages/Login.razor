@page "/login"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Newtonsoft.Json
@using BlazorApp.Pages

<AuthComponent @ref="authComponent" />

<div class="container">

    <div class="col-md-6 mt-5 mx-auto">

        <div class="card-header bg-secondary text-white">
            <h3>Sign In</h3>
        </div>

        <div class="card-body bg-dark" style="min-height: 320px">
            <form class="needs-validation" onsubmit="return false">
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    </div>
                    <input type="Email" name="Email" class="form-control" placeholder="Email" required @bind="email">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-key"></i></span>
                    </div>
                    <input type="password" name="Password" class="form-control" placeholder="password" required @bind="password">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="form-check text-light input-group-lg">
                    <input type="checkbox" class="form-check-input" id="rememberMeCheck">
                    <label class="form-check-label" for="rememberMeCheck">Remember me</label>
                </div>
                <div class="form-group d-flex justify-content-end">
                    <input type="submit" value="Login" class="btn btn-light" @onclick="SubmitLoginForm">
                </div>
            </form>
        </div>

        <div class="card-footer bg-secondary">
            <div class="d-flex justify-content-center text-light">
                <span>Don't have an account? <a href="register">Sign Up</a></span>
            </div>
        </div>

        @if (loginError == true)
        {
            <div class="alert alert-danger alert-dismissible mt-4">
                @*<button type="button" class="close" data-dismiss="alert">&times;</button>*@
                <strong>Attention!</strong> @loginErrorMessage.
            </div>
        }

    </div>

</div>


@code {
    private AuthComponent authComponent;

    const string ApiLoginEndpoint = "http://localhost:60094/api/v1/users/login";

    private string email;
    private string password;

    bool loginError = false;
    string loginErrorMessage;


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (await authComponent.UserIsLoggedIn())
        {
            NavigationManager.NavigateTo("/home", true);
        }
    }

    private async Task SubmitLoginForm()
    {

        if (string.IsNullOrWhiteSpace(email) ||
            string.IsNullOrWhiteSpace(password))
        {
            //loginError = true;
            //loginErrorMessage = "Please fill out all fields!";
            return;
        }

        LoginFormDTO userLoginData = new LoginFormDTO
        {
            Email = email,
            Password = password
        };

        LoginError loginErrorObj;
        var httpResponse = await HttpClient.PostAsJsonAsync(ApiLoginEndpoint, userLoginData);

        if (!httpResponse.IsSuccessStatusCode) // status code range (200-299)
        {
            loginErrorObj = await httpResponse.Content.ReadFromJsonAsync<LoginError>();
            loginError = true;
            loginErrorMessage = loginErrorObj.ErrorMessage;
            Console.WriteLine($"Error: {(int)httpResponse.StatusCode} {httpResponse.ReasonPhrase} --- {loginErrorObj.ErrorMessage}");
            return;
        }

        string jsonString = await httpResponse.Content.ReadAsStringAsync();
        Console.WriteLine($"SubmitLoginForm response: {jsonString}");
        dynamic jsonObject = JsonConvert.DeserializeObject(jsonString);

        await localStorage.SetItemAsync("jwt", (string)jsonObject.jwt);
        NavigationManager.NavigateTo("/home", true);
    }

    public class LoginFormDTO
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    public class LoginError
    {
        public string ErrorMessage { get; set; }
    }

}
