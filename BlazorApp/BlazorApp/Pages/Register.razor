@page "/register"
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<div class="container">

    <div class="col-sm-6 mt-5 mx-auto">

        <div class="card-header bg-secondary text-white">
            <h3>Register</h3>
        </div>

        <div class="card-body bg-dark" style="min-height: 320px">
            <form class="needs-validation" onsubmit="return false">
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                    </div>
                    <input type="Email" name="Email" class="form-control" placeholder="Email" required @bind="email">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                    </div>
                    <input type="text" name="Username" class="form-control" placeholder="Username" required @bind="username">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-key"></i></span>
                    </div>
                    <input type="password" name="Password" class="form-control" placeholder="Password" required @bind="password">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="input-group form-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text"><i class="fas fa-check"></i></span>
                    </div>
                    <input type="password" name="ConfirmPassword" class="form-control" placeholder="Confirm Password" required @bind="confirmPassword">
                    <div class="invalid-feedback">Please fill out this field!</div>
                </div>
                <div class="form-group d-flex justify-content-end">
                    <input type="submit" value="Sign Up" class="btn btn-light" @onclick='SubmitRegisterForm'>
                </div>
            </form>
        </div>


        <div class="card-footer bg-secondary">
            <div class="d-flex justify-content-center text-light">
                <span>Already have an account? <a class="text-info" href="login">Login</a></span>
            </div>
        </div>

        @if (registerError == true)
        {
            <div class="alert alert-danger alert-dismissible mt-4">
                @*<button type="button" class="close" data-dismiss="alert">&times;</button>*@
                <strong>Attention!</strong> @registerErrorMessage.
            </div>
        }
    </div>

</div>

@code {
    const string ApiRegisterEndpoint = "http://localhost:60094/api/v1/users/register";

    private string email;
    private string username;
    private string password;
    private string confirmPassword;

    bool registerError;
    string registerErrorMessage;


    public async Task SubmitRegisterForm()
    {

        if (string.IsNullOrWhiteSpace(username) ||
            string.IsNullOrWhiteSpace(email) ||
            string.IsNullOrWhiteSpace(password) ||
            string.IsNullOrWhiteSpace(confirmPassword))
        {
            //registerError = true;
            //registerErrorMessage = "Please fill out all fields!";
            return;
        }

        if (password != confirmPassword)
        {
            registerError = true;
            registerErrorMessage = "Passwords don't match!";
            return;
        }

        RegisterFormDTO registerForm = new RegisterFormDTO
        {
            Username = username,
            Email = email,
            Password = password
        };

        RegisterError registerErrorObj;
        var httpResponse = await HttpClient.PostAsJsonAsync(ApiRegisterEndpoint, registerForm);

        if (!httpResponse.IsSuccessStatusCode) // status code range (200-299)
        {
            registerErrorObj = await httpResponse.Content.ReadFromJsonAsync<RegisterError>();
            registerError = true;
            registerErrorMessage = registerErrorObj.ErrorMessage;
            Console.WriteLine($"Error: {(int)httpResponse.StatusCode} {httpResponse.ReasonPhrase} --- {registerErrorObj.ErrorMessage}");
            return;
        }

        NavigationManager.NavigateTo("/login", true);
    }

    private class RegisterFormDTO
    {
        public string Email { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class RegisterError
    {
        public string ErrorMessage { get; set; }
    }
}
